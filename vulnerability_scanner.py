# vulnerability_scanner.py
import json, os
import time
import socket
import subprocess
import platform
from datetime import datetime
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QFont, QColor, QPixmap, QPainter, QBrush
from PyQt5.QtWidgets import QWidget, QVBoxLayout, QLabel, QPushButton, QTableWidget, QTableWidgetItem, QStackedWidget, \
    QDockWidget, QListWidget, QHeaderView, QDialog, QFrame, QHBoxLayout, QMessageBox, QTreeWidgetItem, QTreeWidget, \
    QAbstractItemView, QLayout, QComboBox, QTextEdit, QSpacerItem, QSizePolicy, QApplication
from PyQt5.QtChart import QBarSet, QBarSeries, QChart, QBarCategoryAxis, QValueAxis, QChartView, QLineSeries, \
    QDateTimeAxis
from reportlab.lib.pagesizes import landscape, letter, A4, A3
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.platypus import Table, TableStyle, SimpleDocTemplate, Spacer
from reportlab.lib import colors
from reportlab.platypus import Paragraph
from score_label import ScoreLabel
from summary_dialog import SummaryDialog

class VulnerabilityScanner(QWidget):
    def __init__(self, customer_info_widget=None, score_label=None, home_widget=None):
        super().__init__()
        self.customer_info_widget = customer_info_widget
        self.score_label = score_label
        self.home_widget = home_widget
        self.report_data = {
            '점검 완료 시간': '',
            'Check score': '',
            '점검 결과': {}
        }
        self.completion_time = None  # 점검 완료 시간을 저장할 속성 추가
        self.total_score = 0  # 점검 점수를 저장할 속성 추가
        self.summary_data = {'양호한 항목': 0, '취약한 항목': 0, '점검 불가 항목': 0}  # 점검 결과 요약을 저장할 속성 추가

        # 메인 수직 레이아웃 설정
        main_layout = QVBoxLayout(self)

        # 레이아웃 1: 버튼들을 위한 레이아웃
        buttons_layout = QHBoxLayout()
        # 점검결과 점수를 표시할 QLabel 위젯 추가
        self.score_label = QLabel("점검결과: 00점")
        self.score_label.setStyleSheet("""
            QLabel {
            font-weight: bold;
            font-size: 18px;
            color: white;
            }
            """)
        buttons_layout.addWidget(self.score_label)

        self.all_check_button = QPushButton("전체 점검", self)
        self.all_check_button.setStyleSheet("""
                QPushButton {
                    background-color: #4CAF50;
                    color: white;
                    border-radius: 5px;
                    padding: 8px;
                }
                QPushButton:hover {
                    background-color: #45a049;
                }
            """)
        self.all_check_button.clicked.connect(self.run_all_checks)
        buttons_layout.addWidget(self.all_check_button)

        self.individual_check_button = QPushButton("개별 항목 점검", self)
        self.individual_check_button.setStyleSheet("""
                QPushButton {
                    background-color: #4CAF50;
                    color: white;
                    border-radius: 5px;
                    padding: 8px;
                }
                QPushButton:hover {
                    background-color: #45a049;
                }
            """)
        self.individual_check_button.clicked.connect(self.run_individual_check)
        buttons_layout.addWidget(self.individual_check_button)

        # "자동진단 결과 저장" 버튼 추가
        self.create_report_button = QPushButton("자동진단 결과 저장", self)
        self.create_report_button.setStyleSheet("""
            QPushButton {
            background-color: #3498db;
            color: white;
            border-radius: 5px;
            padding: 8px;
            }
            QPushButton:hover {
            background-color: #2980b9;
            }
            """)
        self.create_report_button.clicked.connect(self.save_report)
        buttons_layout.addWidget(self.create_report_button)

        # 레이아웃 1를 메인 레이아웃에 추가
        main_layout.addLayout(buttons_layout)

        # 레이아웃 2: 결과 테이블을 위한 레이아웃
        result_table_layout = QVBoxLayout()
        self.result_table = QTableWidget()
        self.result_table.setColumnCount(3)
        self.result_table.setHorizontalHeaderLabels(["카테고리", "점검항목", "결과"])
        result_table_layout.addWidget(self.result_table)

        # 테이블 열 너비 및 사용자 조정 방지 설정
        self.result_table.horizontalHeader().setSectionResizeMode(QHeaderView.Fixed)
        self.result_table.setColumnWidth(0, 200)
        self.result_table.setColumnWidth(1, 600)
        self.result_table.setColumnWidth(2, 200)

        # 레이아웃 2을 메인 레이아웃에 추가
        main_layout.addLayout(result_table_layout)

        # 레이아웃 3: 상세 정보 출력 및 추가 정보 표시를 위한 레이아웃
        layout_3 = QHBoxLayout()

        # 배치 파일 실행하여 결과 가져오기
        batch_file_path = os.path.join(os.getcwd(), "_internal", "batch_files", "userinfo.bat.bat")
        process = subprocess.Popen(batch_file_path, stdout=subprocess.PIPE)
        output, error = process.communicate()
        user_info = output.decode('cp949').strip()

        # 추가 정보를 표시하기 위한 레이아웃
        additional_info_layout = QVBoxLayout()
        self.check_pc_label = QLabel(f"점검자: {user_info}")
        self.start_time_label = QLabel("점검 시작 시간: 대기 중")
        self.end_time_label = QLabel("점검 완료 시간: 대기 중")
        self.status_label = QLabel("상태: 대기 중")
        self.report_label = QLabel("결과 저장: 대기중 ")

        # 추가 정보 레이아웃에 QLabel 위젯들을 추가
        additional_info_layout.addWidget(self.check_pc_label)
        additional_info_layout.addWidget(self.start_time_label)
        additional_info_layout.addWidget(self.end_time_label)
        additional_info_layout.addWidget(self.status_label)
        additional_info_layout.addWidget(self.report_label)

        # 레이아웃 3에 추가 정보 레이아웃과 상세 정보 출력 레이아웃을 추가
        layout_3.addLayout(additional_info_layout)

        # 레이아웃 3: 세부 정보 출력을 위한 QTextEdit
        detail_info_layout = QVBoxLayout()
        self.detail_info = QTextEdit(self)
        self.detail_info.setReadOnly(True)
        detail_info_layout.addWidget(self.detail_info)
        self.result_table.itemClicked.connect(self.show_detail_info)

        layout_3.addLayout(detail_info_layout)

        # 레이아웃 3을 메인 레이아웃에 추가
        main_layout.addLayout(layout_3)

        self.results = {
            "서비스 관리": ["공유 폴더 점검", "멀티 OS 점검", "NTFS 설정 점검"],
            "패치 관리": ["윈도우 최신 버전 점검", "윈도우 업데이트 점검"],
            "계정 관리": ["패스워드 변경 주기 점검", "패스워드 최소길이 점검", "패스워드 복잡성 점검", "복구 콘솔 자동로그온 점검"],
            "보안 관리": ["화면보호기 설정", "화면보호기 10분 이내 설정", "화면보호기 암호화 점검", "백신 프로그램 업데이트 점검", "백신 프로그램 실시간 감시", "Windows Defender방화벽 실행 점검",
                      "휴지통 점검"],
            "SW 관리": ["이글아이 설치 점검", "문서보안 설치 점검", "SKT-AD 설치 점검", "SKT-DLP 설치 점검", "evEraser 설치 점검"]
        }

        self.populate_table()

    def update_score(self, score):
        # 점검 결과 점수 업데이트 함수
        formatted_score = f"{score:.1f}"  # 소수점 첫 번째 자리까지 포맷팅
        self.score_label.setText(f"점검결과: {formatted_score}점")

        # 점수에 따라 색상 선택
        if score >= 80:
            color = "green"
        elif score >= 31:
            color = "yellow"
        else:
            color = "red"

        # 색상을 적용하여 QLabel의 스타일 업데이트
        self.score_label.setStyleSheet(f"""
            QLabel {{
                font-weight: bold;
                font-size: 18px;
                color: {color};
            }}
            """)

    def populate_table(self):
        row_count = sum(len(items) for items in self.results.values())
        self.result_table.setRowCount(row_count)
        row = 0
        for category, items in self.results.items():
            for item in items:
                category_item = QTableWidgetItem(category)
                category_item.setTextAlignment(Qt.AlignCenter)
                self.result_table.setItem(row, 0, category_item)

                item_item = QTableWidgetItem(item)
                item_item.setTextAlignment(Qt.AlignCenter)
                self.result_table.setItem(row, 1, item_item)

                result_item = QTableWidgetItem("대기중")
                result_item.setTextAlignment(Qt.AlignCenter)
                self.result_table.setItem(row, 2, result_item)

                row += 1

    def run_all_checks(self):
        self.update_start_time_and_status()  # 점검 시작 시간과 상태 업데이트
        QApplication.processEvents()  # GUI 업데이트를 위한 이벤트 처리
        total_items = sum(len(items) for items in self.results.values())  # 총 점검 항목 수 계산
        item_score = 100 / total_items  # 각 항목당 점수 계산
        total_score = 0  # 총 점수 초기화

        for category, items in self.results.items():
            for item in items:
                score = self.run_check(category, item)  # 점검 실행 및 점수 받기
                if score:
                    total_score += item_score  # 양호한 항목의 점수 누적

        self.update_score(total_score)  # 총 점수 업데이트
        self.show_summary()  # 요약 창 표시
        self.update_completion_time_and_status()  # 점검 완료 시간과 상태 업데이트
        self.total_score = total_score  # 점검 점수를 속성에 저장

    def update_start_time_and_status(self):
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        self.start_time_label.setText(f"점검 시작 시간: {current_time}")
        self.status_label.setText("상태: 점검 중")

    def update_completion_time_and_status(self):
        completion_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        self.end_time_label.setText(f"점검 완료 시간: {completion_time}")
        self.status_label.setText("상태: 점검 완료")
        self.completion_time = completion_time  # 점검 완료 시간을 속성에 저장

    def show_summary(self):
        # 요약 정보를 저장할 딕셔너리 초기화
        summary_data = {
            '양호한 항목': 0,
            '취약한 항목': 0,
            '점검 불가 항목': 0
        }
        # 결과를 순회하면서 카운트
        for row in range(self.result_table.rowCount()):
            result = self.result_table.item(row, 2).text()
            if result == "양호":
                summary_data['양호한 항목'] += 1
            elif result == "미흡":
                summary_data['취약한 항목'] += 1
            elif result == "점검 스크립트가 없습니다.":
                summary_data['점검 불가 항목'] += 1
        # 동적 데이터로 요약 창 표시
        dialog = SummaryDialog(summary_data, self)
        dialog.exec_()
        self.summary_data = summary_data


    def run_individual_check(self):
        selected_items = self.result_table.selectedItems()
        if selected_items:
            row = self.result_table.row(selected_items[0])
            category = self.result_table.item(row, 0).text()
            item = self.result_table.item(row, 1).text()
            self.run_check(category, item)
            self.recalculate_score()  # 전체 점수 재계산 및 업데이트

    def recalculate_score(self):
        total_items = sum(len(items) for items in self.results.values())  # 총 점검 항목 수 계산
        item_score = 100 / total_items  # 각 항목당 점수 계산
        total_score = 0  # 총 점수 초기화

        # 요약 정보를 저장할 딕셔너리 초기화
        summary_data = {
            '양호한 항목': 0,
            '취약한 항목': 0,
            '점검 불가 항목': 0
        }

        for row in range(self.result_table.rowCount()):
            result = self.result_table.item(row, 2).text()
            if result == "양호":
                total_score += item_score  # 양호한 항목의 점수 누적
                summary_data['양호한 항목'] += 1
            elif result == "미흡":
                summary_data['취약한 항목'] += 1
            elif result == "점검 스크립트가 없습니다.":
                summary_data['점검 불가 항목'] += 1

        total_score = round(total_score)  # 총 점수를 반올림
        self.update_score(total_score)  # 총 점수 업데이트
        self.total_score = total_score  # 점검 점수를 속성에 저장
        self.summary_data = summary_data  # 점검 결과 요약을 속성에 저장
        return total_score

    def run_check(self, category, item):
        batch_file = self.get_batch_file_path(category, item)
        detailed_info = ""  # '미흡'인 경우의 상세 정보를 저장할 변수
        score = False  # 점수 초기화 (양호하면 True, 미흡하면 False)
        if not batch_file:
            result = "점검 스크립트가 없습니다."
        else:
            try:
                # shell=False를 사용하고, 명령어와 인자를 리스트로 전달
                completed_process = subprocess.run([batch_file], capture_output=True, text=True, shell=False)
                output = completed_process.stdout.strip()
                if "미흡" in output:
                    result = "미흡"
                    detailed_info = output
                elif "양호" in output:
                    result = "양호"
                    detailed_info = output  # '양호'인 경우 상세 정보를 output으로 설정
                    score = True  # 양호한 경우 점수 True로 설정
                else:
                    result = "스크립트 수정"  # 점검 결과가 명확하지 않은 경우
            except Exception as e:
                result = f"Error: {str(e)}"
        self.update_result(category, item, result, detailed_info)
        return score  # 점수 반환

    def get_batch_file_path(self, category, item):
        batch_files = {
            ("서비스 관리", "멀티 OS 점검"): os.path.join(os.getcwd(), "_internal", "batch_files", "multibooting.bat"),
            ("서비스 관리", "NTFS 설정 점검"): os.path.join(os.getcwd(), "_internal", "batch_files", "diskntfs.bat"),
            ("서비스 관리", "공유 폴더 점검"): os.path.join(os.getcwd(), "_internal", "batch_files", "sharedfolder.bat"),
            ("패치 관리", "윈도우 최신 버전 점검"): os.path.join(os.getcwd(), "_internal", "batch_files", "winverupgrade.bat"),
            ("패치 관리", "윈도우 업데이트 점검"): os.path.join(os.getcwd(), "_internal", "batch_files", "HOTFIX_month.bat"),
            ("보안 관리", "화면보호기 설정"): os.path.join(os.getcwd(), "_internal", "batch_files", "1screensaver.bat"),
            ("보안 관리", "화면보호기 암호화 점검"): os.path.join(os.getcwd(), "_internal", "batch_files", "screensecure.bat"),
            ("보안 관리", "화면보호기 10분 이내 설정"): os.path.join(os.getcwd(), "_internal", "batch_files", "screensaversetting.bat"),
            ("보안 관리", "휴지통 점검"): os.path.join(os.getcwd(), "_internal", "batch_files", "strachcheck.bat"),
            ("보안 관리", "Windows Defender방화벽 실행 점검"): os.path.join(os.getcwd(), "_internal", "batch_files", "sfirewallcheck.bat"),
            ("보안 관리", "백신 프로그램 업데이트 점검"): os.path.join(os.getcwd(), "_internal", "batch_files", "svaccine_update.bat"),
            ("보안 관리", "백신 프로그램 실시간 감시"): os.path.join(os.getcwd(), "_internal", "batch_files", "svaccinertmonitor.bat"),
            ("계정 관리", "패스워드 변경 주기 점검"): os.path.join(os.getcwd(), "_internal", "batch_files", "passwordch.bat"),
            ("계정 관리", "패스워드 최소길이 점검"): os.path.join(os.getcwd(), "_internal", "batch_files", "minpwlen.bat"),
            ("계정 관리", "패스워드 복잡성 점검"): os.path.join(os.getcwd(), "_internal", "batch_files", "pwsecset.bat"),
            ("계정 관리", "복구 콘솔 자동로그온 점검"): os.path.join(os.getcwd(), "_internal", "batch_files", "srecoverconsole.bat"),
            ("SW 관리", "SKT-DLP 설치 점검"): os.path.join(os.getcwd(), "_internal", "batch_files", "sktdlpch.bat"),
            ("SW 관리", "이글아이 설치 점검"): os.path.join(os.getcwd(), "_internal", "batch_files", "eagleyecheck.bat"),
            ("SW 관리", "문서보안 설치 점검"): os.path.join(os.getcwd(), "_internal", "batch_files", "softcampcheck.bat"),
            ("SW 관리", "evEraser 설치 점검"): os.path.join(os.getcwd(), "_internal", "batch_files", "everaserch.bat"),
            ("SW 관리", "SKT-AD 설치 점검"): os.path.join(os.getcwd(), "_internal", "batch_files", "sadcheck.bat"),
            # ... add other mappings ...
        }
        return batch_files.get((category, item))

    def update_result(self, category, item, result, detailed_info=""):
        # 결과와 상세 정보를 테이블에 업데이트
        for row in range(self.result_table.rowCount()):
            if self.result_table.item(row, 0).text() == category and self.result_table.item(row, 1).text() == item:
                result_item = QTableWidgetItem(result)
                result_item.setTextAlignment(Qt.AlignCenter)  # 결과를 가운데 정렬
                self.result_table.setItem(row, 2, result_item)
                # 상세 정보를 저장
                self.result_table.item(row, 2).setData(Qt.UserRole, detailed_info)
                self.result_table.setEditTriggers(QAbstractItemView.NoEditTriggers)
                break


    def show_detail_info(self, item):
        row = item.row()
        category = self.result_table.item(row, 0).text()
        inspection_item = self.result_table.item(row, 1).text()
        result = self.result_table.item(row, 2).text()
        detailed_info = self.result_table.item(row, 2).data(Qt.UserRole)

        detail_text = f"<b>Category:</b> {category}<br><b>Item:</b> {inspection_item}<br><b>Result:</b> {result}"

        if result == "미흡" and detailed_info:
            detailed_info_html = detailed_info.replace("미흡", "").replace("현재 상태: ", "현재 상태: ").replace("조치 방법: ",
                                                                                                       "조치 방법: ")
            detailed_info_html = detailed_info_html.replace("\n", "<br>")
            detail_text += f"<br><b>Detailed Information:</b>{detailed_info_html}"
        elif result == "양호" and detailed_info:
            detailed_info_html = detailed_info.replace("양호", "").replace("현재 상태: ", "현재 상태: ")
            detailed_info_html = detailed_info_html.replace("\n", "<br>")
            detail_text += f"<br><b>Detailed Information:</b>{detailed_info_html}"

        self.detail_info.setHtml(detail_text)


    def interpret_batch_output(self, output):
        # Interpret the output of the batch file and return an appropriate status
        if "insufficient" in output.lower():
            return "Insufficient - Immediate action required"
        else:
            return "Good - No action required"

    # 보안 점검 결과를 JSON 파일에 저장하는 함수
    def save_security_check_result(self, completion_time, summary_data, total_score):
        if completion_time is None:
            QMessageBox.warning(self, "점검 필요", "전체 점검을 먼저 수행해주세요")
            return

        # file_path = 'C:\\security_check_history.json'
        file_path = 'security_check_history.json'  # 상대 경로로 변경
        try:
            with open(file_path, 'r', encoding='utf-8') as file:
                history = json.load(file)
        except (FileNotFoundError, json.JSONDecodeError):
            history = []

        # total_score를 소수점 두 번째 자리에서 반올림
        total_score = round(total_score, 2)

        new_record = {
            'completion_time': completion_time,
            'summary': summary_data,
            'total_score': total_score
        }
        history.append(new_record)
        history = history[-5:]  # 최신 5개 기록만 유지

        with open(file_path, 'w', encoding='utf-8') as file:
            json.dump(history, file, ensure_ascii=False, indent=4)
        print(json.dumps(history, indent=4, ensure_ascii=False))

    def save_report(self):
        # summary_data = self.show_summary()
        self.save_security_check_result(self.completion_time, self.summary_data, self.total_score)
        self.report_label.setText("결과 저장: Success")

        # home_widget의 메서드를 호출하여 화면을 갱신합니다.
        if self.home_widget is not None:
            self.home_widget.update_scoreboard()
            self.home_widget.update_recent_inspection_graph()
            self.home_widget.update_security_check_trend()